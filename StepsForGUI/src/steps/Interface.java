/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package steps;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.*;
import libsvm.svm_parameter;
import libsvm.svm_problem;
import svm.LinearOptimizer;
import svm.LoadingLIBSVM;
import svm.RbfOptimizer;

/**
 *
 * @author Benten
 */
public class Interface extends javax.swing.JFrame implements MyLog {
    JLabel jlab = new JLabel(); 
    private BufferedImage img = null;
    private BufferedImage processImg = null;
    private double[][] imgBW = new double[1][1];
    private double[][] step2Result = new double[1][1]; // prima dimensiune este indicele coloana
    private double[][] step3Result = new double[1][1]; // prima dimensiune este indicele rand
    private Step4.Result step4Result = null;
    private String trainFile;
    private String testFile;
    private String labelsFile;
    /**
     * Creates new form importImage
     */
    public Interface() {
        initComponents();            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPaneGUI = new javax.swing.JTabbedPane();
        panelSteps = new javax.swing.JPanel();
        loadImgButton = new javax.swing.JButton();
        step1Run = new javax.swing.JButton();
        threshStep1 = new javax.swing.JLabel();
        param = new javax.swing.JTextField();
        meniuLabel = new javax.swing.JLabel();
        step2Run = new javax.swing.JButton();
        nrIteratii = new javax.swing.JLabel();
        iteratii = new javax.swing.JTextField();
        step3Run = new javax.swing.JButton();
        step4Run = new javax.swing.JButton();
        exportStep4 = new javax.swing.JButton();
        jSP = new javax.swing.JScrollPane();
        initialImgLabel = new javax.swing.JLabel();
        imgProcSP = new javax.swing.JScrollPane();
        imgProcLabel = new javax.swing.JLabel();
        consolaSP = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        rezultatLabel = new javax.swing.JLabel();
        hLabel = new javax.swing.JLabel();
        hParam = new javax.swing.JTextField();
        lLabel = new javax.swing.JLabel();
        lParam = new javax.swing.JTextField();
        loadLabesDB = new javax.swing.JButton();
        panelSVM = new javax.swing.JPanel();
        tabbedPaneParams = new javax.swing.JTabbedPane();
        panelLiniarSVM = new javax.swing.JPanel();
        cLiniarLabel = new javax.swing.JLabel();
        cLiniarParam = new javax.swing.JTextField();
        runLiniar = new javax.swing.JButton();
        runLiniarAuto = new javax.swing.JButton();
        resultLiniar = new javax.swing.JLabel();
        liniarSP = new javax.swing.JScrollPane();
        consolaLiniar = new javax.swing.JTextArea();
        panelRbfSVM = new javax.swing.JPanel();
        gammaRbfLabel = new javax.swing.JLabel();
        gammaRbfParam = new javax.swing.JTextField();
        cRbfLabel = new javax.swing.JLabel();
        cRbfParam = new javax.swing.JTextField();
        resultRBF = new javax.swing.JLabel();
        rbfSP = new javax.swing.JScrollPane();
        consolaRBF = new javax.swing.JTextArea();
        runRBF = new javax.swing.JButton();
        runRBFAuto = new javax.swing.JButton();
        loadTrainDB = new javax.swing.JButton();
        loadTestDB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadImgButton.setText("Incarca poza");
        loadImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImgButtonActionPerformed(evt);
            }
        });

        step1Run.setText("Generare pas 1");
        step1Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                step1RunActionPerformed(evt);
            }
        });

        threshStep1.setText("Prag :");

        param.setText("50");
        param.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramActionPerformed(evt);
            }
        });

        meniuLabel.setForeground(new java.awt.Color(0, 51, 255));
        meniuLabel.setText("Meniu");

        step2Run.setText("Generare pas 2");
        step2Run.setActionCommand("Step2");
        step2Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                step2RunActionPerformed(evt);
            }
        });

        nrIteratii.setText("  Nr. Iteratii :");

        iteratii.setText("50");
        iteratii.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iteratiiActionPerformed(evt);
            }
        });

        step3Run.setText("Generare pas 3");
        step3Run.setEnabled(false);
        step3Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                step3RunActionPerformed(evt);
            }
        });

        step4Run.setText("Generare pas 4");
        step4Run.setEnabled(false);
        step4Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                step4RunActionPerformed(evt);
            }
        });

        exportStep4.setText("Export fisiere train/test");
        exportStep4.setEnabled(false);
        exportStep4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportStep4ActionPerformed(evt);
            }
        });

        initialImgLabel.setForeground(new java.awt.Color(0, 51, 255));
        initialImgLabel.setText("Poza initiala");

        imgProcLabel.setForeground(new java.awt.Color(0, 51, 255));
        imgProcLabel.setText("Poza prelucrata");

        consola.setEditable(false);
        consola.setColumns(20);
        consola.setRows(5);
        consolaSP.setViewportView(consola);

        rezultatLabel.setForeground(new java.awt.Color(0, 51, 255));
        rezultatLabel.setText("Rezultat");

        hLabel.setText("h=");

        hParam.setText("4");
        hParam.setEnabled(false);
        hParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hParamActionPerformed(evt);
            }
        });

        lLabel.setText("l=");

        lParam.setText("4");
        lParam.setEnabled(false);
        lParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lParamActionPerformed(evt);
            }
        });

        loadLabesDB.setText("Incarca baza de date bruta");
        loadLabesDB.setEnabled(false);
        loadLabesDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLabesDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelStepsLayout = new javax.swing.GroupLayout(panelSteps);
        panelSteps.setLayout(panelStepsLayout);
        panelStepsLayout.setHorizontalGroup(
            panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStepsLayout.createSequentialGroup()
                .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStepsLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(meniuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(initialImgLabel)
                        .addGap(555, 555, 555)
                        .addComponent(imgProcLabel))
                    .addGroup(panelStepsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(step3Run, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(step2Run, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(step4Run, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(exportStep4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(loadLabesDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelStepsLayout.createSequentialGroup()
                                    .addComponent(hLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hParam, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(lLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lParam, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27))
                                .addComponent(loadImgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(step1Run, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelStepsLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(nrIteratii)
                                .addGap(18, 18, 18)
                                .addComponent(iteratii, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStepsLayout.createSequentialGroup()
                                .addComponent(threshStep1)
                                .addGap(18, 18, 18)
                                .addComponent(param, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)))
                        .addGap(12, 12, 12)
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rezultatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelStepsLayout.createSequentialGroup()
                                .addComponent(jSP, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(imgProcSP, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(consolaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelStepsLayout.setVerticalGroup(
            panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStepsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initialImgLabel)
                    .addComponent(imgProcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(meniuLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStepsLayout.createSequentialGroup()
                        .addComponent(loadImgButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(param, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(threshStep1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(step1Run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nrIteratii, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iteratii, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(step2Run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(step3Run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadLabesDB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(hLabel)
                                .addComponent(lLabel)
                                .addComponent(hParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(step4Run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportStep4)
                        .addGap(458, 458, 458))
                    .addGroup(panelStepsLayout.createSequentialGroup()
                        .addGroup(panelStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(imgProcSP, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                            .addComponent(jSP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rezultatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consolaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tabbedPaneGUI.addTab("Prelucrare Pasi", null, panelSteps, "");

        cLiniarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cLiniarLabel.setText("c=");
        cLiniarLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        cLiniarParam.setText("10");
        cLiniarParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cLiniarParamActionPerformed(evt);
            }
        });

        runLiniar.setText("Ruleaza");
        runLiniar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runLiniarActionPerformed(evt);
            }
        });

        runLiniarAuto.setText("Cauta automat parametrul");
        runLiniarAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runLiniarAutoActionPerformed(evt);
            }
        });

        resultLiniar.setText("In urma parametrilor introdusi rezultatele sunt:");

        consolaLiniar.setEditable(false);
        consolaLiniar.setColumns(20);
        consolaLiniar.setRows(5);
        liniarSP.setViewportView(consolaLiniar);

        javax.swing.GroupLayout panelLiniarSVMLayout = new javax.swing.GroupLayout(panelLiniarSVM);
        panelLiniarSVM.setLayout(panelLiniarSVMLayout);
        panelLiniarSVMLayout.setHorizontalGroup(
            panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                .addGroup(panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(runLiniarAuto))
                    .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runLiniar)
                            .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                                .addComponent(cLiniarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cLiniarParam, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(30, 30, 30)
                .addGroup(panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultLiniar, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liniarSP, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelLiniarSVMLayout.setVerticalGroup(
            panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(resultLiniar)
                .addGap(9, 9, 9)
                .addGroup(panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLiniarSVMLayout.createSequentialGroup()
                        .addGroup(panelLiniarSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cLiniarParam)
                            .addComponent(cLiniarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runLiniar)
                        .addGap(32, 32, 32)
                        .addComponent(runLiniarAuto))
                    .addComponent(liniarSP, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
        );

        cLiniarLabel.getAccessibleContext().setAccessibleDescription("");

        tabbedPaneParams.addTab("Liniar", null, panelLiniarSVM, "");

        gammaRbfLabel.setText("gamma=");

        gammaRbfParam.setText("0.5");
        gammaRbfParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammaRbfParamActionPerformed(evt);
            }
        });

        cRbfLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cRbfLabel.setText("c=");
        cRbfLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        cRbfParam.setText("10");
        cRbfParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cRbfParamActionPerformed(evt);
            }
        });

        resultRBF.setText("In urma parametrilor introdusi rezultatele sunt:");

        consolaRBF.setEditable(false);
        consolaRBF.setColumns(20);
        consolaRBF.setRows(5);
        rbfSP.setViewportView(consolaRBF);

        runRBF.setText("Ruleaza");
        runRBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runRBFActionPerformed(evt);
            }
        });

        runRBFAuto.setText("Cauta automat parametrii");
        runRBFAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runRBFAutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRbfSVMLayout = new javax.swing.GroupLayout(panelRbfSVM);
        panelRbfSVM.setLayout(panelRbfSVMLayout);
        panelRbfSVMLayout.setHorizontalGroup(
            panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRbfSVMLayout.createSequentialGroup()
                .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRbfSVMLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(runRBFAuto))
                    .addGroup(panelRbfSVMLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRbfSVMLayout.createSequentialGroup()
                                .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cRbfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gammaRbfLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cRbfParam)
                                    .addComponent(gammaRbfParam, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelRbfSVMLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(runRBF)))))
                .addGap(30, 30, 30)
                .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultRBF, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbfSP, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelRbfSVMLayout.setVerticalGroup(
            panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRbfSVMLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(resultRBF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRbfSVMLayout.createSequentialGroup()
                        .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cRbfParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cRbfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRbfSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gammaRbfLabel)
                            .addComponent(gammaRbfParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(runRBF)
                        .addGap(18, 18, 18)
                        .addComponent(runRBFAuto))
                    .addComponent(rbfSP, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tabbedPaneParams.addTab("RBF", null, panelRbfSVM, "");

        loadTrainDB.setText("Incarca baza de date train");
        loadTrainDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTrainDBActionPerformed(evt);
            }
        });

        loadTestDB.setText("Incarca baza de date test");
        loadTestDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTestDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSVMLayout = new javax.swing.GroupLayout(panelSVM);
        panelSVM.setLayout(panelSVMLayout);
        panelSVMLayout.setHorizontalGroup(
            panelSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSVMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPaneParams, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(loadTestDB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadTrainDB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 503, Short.MAX_VALUE))
        );
        panelSVMLayout.setVerticalGroup(
            panelSVMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSVMLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(loadTrainDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadTestDB)
                .addGap(18, 18, 18)
                .addComponent(tabbedPaneParams, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(186, Short.MAX_VALUE))
        );

        tabbedPaneGUI.addTab("Clasificator SVM", null, panelSVM, "");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneGUI, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPaneGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hParamActionPerformed

    private void exportStep4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStep4ActionPerformed
        double ratio = 5 / 8.0;
        //JFileChooser jfc = new JFileChooser(Paths.get(".").toAbsolutePath().normalize().toFile());
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Salveaza baza de date train");
        jfc.setSelectedFile(new File("train.txt"));
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File fTrain = jfc.getSelectedFile();
            jfc.setDialogTitle("Salveaza baza de date test");
            jfc.setSelectedFile(new File("test.txt"));
            if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File fTest = jfc.getSelectedFile();
                saveTrainTestFile(step4Result, ratio, fTrain, fTest);
            }
        }
    }//GEN-LAST:event_exportStep4ActionPerformed

    private void step4RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_step4RunActionPerformed
        try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            int h = Integer.parseInt(hParam.getText());
            int l = Integer.parseInt(lParam.getText());
            step4Result = Step4.run(step3Result, imgBW, h, l, labelsFile);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consola.append("Generarea pasului 4 a durat " + delta + " ms\n" );
            exportStep4.setEnabled(true);
            consola.append("\n");
        }
       catch(Exception e){
           consola.append(e.getMessage() + "\n");
       }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_step4RunActionPerformed

    private void step3RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_step3RunActionPerformed
        try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            step3Result = Step3.run(step2Result);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consola.append("Generarea pasului 3 a durat " + delta + " ms\n" );
            consola.append("\n");
            loadLabesDB.setEnabled(true);
        }
       catch(Exception e){
           consola.append(e.getMessage() + "\n");
       }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_step3RunActionPerformed

    private void iteratiiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iteratiiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iteratiiActionPerformed

    private void step2RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_step2RunActionPerformed
        try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            int iteratie = Integer.parseInt(iteratii.getText());
            step2Result = Step2.run(imgBW, 1, iteratie);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consola.append("Segmentarea imaginii s-a realizat cu un numar de "+ iteratie +" iteratii, si a durat " + delta + " ms\n" );
            consola.append("\n");
            step2Result = Step2.run(step2Result, 0, 1);
            int height = step2Result.length;
            int width = step2Result[0].length;
            BufferedImage imgToSHow = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            for (int col = 0; col < width; col++) {
                for (int row = 0; row < height; row++) {
                    int pixel = (int) step2Result[row][col] * 255;
                    Color cnew = new Color(pixel, pixel, pixel);
                    imgToSHow.setRGB(col, row, cnew.getRGB());
                }
            }
            ImageIcon icon = new ImageIcon(ScaledImage(imgToSHow, jSP.getWidth(), jSP.getHeight()));
            jlab.setIcon(icon);
            imgProcSP.getViewport().add(jlab);
            step3Run.setEnabled(true);
        }
       catch(Exception e){
           consola.append(e.getMessage() + "\n");
       }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_step2RunActionPerformed

    private void paramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paramActionPerformed

    private void step1RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_step1RunActionPerformed
//        int width = 850;
//        int height = 900;
        int width = img.getWidth();
        int height = img.getHeight();
        processImg = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
//        processImg.setData(img.getSubimage(248, 0, width, height).getRaster());
        processImg.setData(img.getData());        
        int thresh = Integer.parseInt(param.getText());
        imgBW = new double[height][width];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                Color c = new Color(processImg.getRGB(x, y));
                int red = c.getRed();
                int pixel = red < thresh ? 0 : 255;
                imgBW[y][x] = red < thresh ? 0 : red == thresh ? 0.5 : 1; // poza cu prima dimensiune = randuri
                Color cnew = new Color(pixel, pixel, pixel);
                processImg.setRGB(x, y, cnew.getRGB());
            }
        }
        JLabel jlab = new JLabel();
        ImageIcon icon = new ImageIcon(ScaledImage(processImg, jSP.getWidth(), jSP.getHeight()));
        jlab.setIcon(icon);
        imgProcSP.getViewport().add(jlab);
    }//GEN-LAST:event_step1RunActionPerformed

    private void loadImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImgButtonActionPerformed
        //JFileChooser jfc = new JFileChooser(Paths.get(".").toAbsolutePath().normalize().toFile());
        JFileChooser jfc = new JFileChooser();
        jfc.setSelectedFile(new File("PICT0001_croped.JPG"));
        if (jfc.showOpenDialog(loadImgButton) == JFileChooser.APPROVE_OPTION) {
            img = null;
            try {
                java.io.File f = jfc.getSelectedFile();
                img = ImageIO.read(f);
            } catch (IOException e) {
                System.out.println(e);
            }
            ImageIcon icon = new ImageIcon(ScaledImage(img, jSP.getWidth(), jSP.getHeight()));
             JLabel jlab = new JLabel();
            jlab.setIcon(icon);
            //add jLabel to scroll pane
            jSP.getViewport().add(jlab);
        }
    }//GEN-LAST:event_loadImgButtonActionPerformed

    private void cRbfParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cRbfParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cRbfParamActionPerformed

    private void gammaRbfParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammaRbfParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gammaRbfParamActionPerformed

    private void lParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lParamActionPerformed

    private void cLiniarParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cLiniarParamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cLiniarParamActionPerformed

    private void loadTrainDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTrainDBActionPerformed
        //JFileChooser jfc = new JFileChooser(Paths.get(".").toAbsolutePath().normalize().toFile());
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Incarca baza de date train");
        jfc.setSelectedFile(new File("train.txt"));
        int train = jfc.showOpenDialog(null);
         if (train== JFileChooser.APPROVE_OPTION) 
        {
            File file = jfc.getSelectedFile();
            trainFile= file.getAbsolutePath();
        }
    }//GEN-LAST:event_loadTrainDBActionPerformed

    private void loadTestDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTestDBActionPerformed
        //JFileChooser jfc = new JFileChooser(Paths.get(".").toAbsolutePath().normalize().toFile());
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Incarca baza de date test");
        jfc.setSelectedFile(new File("test.txt"));
        int test = jfc.showOpenDialog(null);
         if (test== JFileChooser.APPROVE_OPTION) 
        {
            File file = jfc.getSelectedFile();
            testFile= file.getAbsolutePath();
        }
    }//GEN-LAST:event_loadTestDBActionPerformed

    private void runRBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runRBFActionPerformed
       try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            svm_problem problem = LoadingLIBSVM.getProblemFromTrainingDataFile(trainFile);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consolaRBF.append("Problema, folosind baza de train, a fost calculata in " + delta + " ms\n");
            svm_parameter params = RbfOptimizer.getParamsForTestFile(problem, testFile, Double.parseDouble(cRbfParam.getText()),Double.parseDouble(gammaRbfParam.getText()), consolaRBF);
            consolaRBF.append("\n");
       }
       catch(Exception e){
           consolaRBF.append(e.getMessage() + "\n");
       }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_runRBFActionPerformed

    private void runRBFAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runRBFAutoActionPerformed
        try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            consolaRBF.append("Parametrii optimizati\n");
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            svm_problem problem = LoadingLIBSVM.getProblemFromTrainingDataFile(trainFile);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consolaRBF.append("Problema, folosind baza de train, a fost calculata in " + delta + " ms\n");
            svm_parameter params = RbfOptimizer.getOptimsForTestFile(problem, testFile ,consolaRBF); // luam parametrii cu acuratetea maxima
            delta = System.currentTimeMillis() - stopTime;
            consolaRBF.append("Parametrii optimi, folosind baza de test, au fost calculati in " + delta + " ms\n");
            consolaRBF.append("\n");
        }
        catch(Exception e){
           consolaRBF.append(e.getMessage() + "\n");
        }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_runRBFAutoActionPerformed

    private void runLiniarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runLiniarActionPerformed
        try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            svm_problem problem = LoadingLIBSVM.getProblemFromTrainingDataFile(trainFile);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consolaLiniar.append("Problema, folosind baza de train, a fost calculata in " + delta + " ms\n");
            svm_parameter params = LinearOptimizer.getParamsForTestFile(problem, testFile, Double.parseDouble(cLiniarParam.getText()), consolaLiniar);
            consolaLiniar.append("\n");
        }
       catch(Exception e){
           consolaLiniar.append(e.getMessage() + "\n");
       }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_runLiniarActionPerformed

    private void runLiniarAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runLiniarAutoActionPerformed
       try{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            consolaLiniar.append("Parametrii optimizati\n");
            long startTime, stopTime, delta;
            startTime = System.currentTimeMillis();
            svm_problem problem = LoadingLIBSVM.getProblemFromTrainingDataFile(trainFile);
            stopTime = System.currentTimeMillis();
            delta = (stopTime - startTime);
            consolaLiniar.append("Problema, folosind baza de train, a fost calculata in " + delta + " ms\n");
            svm_parameter params = LinearOptimizer.getOptimsForTestFile(problem, testFile ,consolaLiniar); // luam parametrii cu acuratetea maxima
            delta = System.currentTimeMillis() - stopTime;
            consolaLiniar.append("Parametrul optim, folosind baza de test, a fost calculat in " + delta + " ms\n"); 
            consolaLiniar.append("\n");
        }
        catch(Exception e){
           consolaLiniar.append(e.getMessage() + "\n");
        }
        finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_runLiniarAutoActionPerformed

    private void loadLabesDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLabesDBActionPerformed
        //JFileChooser jfc = new JFileChooser(Paths.get(".").toAbsolutePath().normalize().toFile());
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Incarca baza de date bruta");
        jfc.setSelectedFile(new File("etichete.txt"));
        int label = jfc.showOpenDialog(null);
         if (label== JFileChooser.APPROVE_OPTION) 
        {
            File file = jfc.getSelectedFile();
            labelsFile= file.getAbsolutePath();
        }
        step4Run.setEnabled(true);
        hParam.setEnabled(true);
        lParam.setEnabled(true);
    }//GEN-LAST:event_loadLabesDBActionPerformed
    //functie care ma ajuta sa iau o parte din imagine
    private Image ScaledImage(Image img, int w, int h) {
        BufferedImage resizeImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);
        Graphics2D g2 = resizeImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img, 0, 0, w, h, null);
        g2.dispose();
        return resizeImage;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Interface myFrame = new Interface();
        myFrame.setTitle("Recunoasterea cifrelor cu ajutorul clasificatorului SVM");
        Utils.log = myFrame;
//        Utils.log = new ConsoleLog();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                myFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cLiniarLabel;
    private javax.swing.JTextField cLiniarParam;
    private javax.swing.JLabel cRbfLabel;
    private javax.swing.JTextField cRbfParam;
    private javax.swing.JTextArea consola;
    private javax.swing.JTextArea consolaLiniar;
    private javax.swing.JTextArea consolaRBF;
    private javax.swing.JScrollPane consolaSP;
    private javax.swing.JButton exportStep4;
    private javax.swing.JLabel gammaRbfLabel;
    private javax.swing.JTextField gammaRbfParam;
    private javax.swing.JLabel hLabel;
    private javax.swing.JTextField hParam;
    private javax.swing.JLabel imgProcLabel;
    private javax.swing.JScrollPane imgProcSP;
    private javax.swing.JLabel initialImgLabel;
    private javax.swing.JTextField iteratii;
    private javax.swing.JScrollPane jSP;
    private javax.swing.JLabel lLabel;
    private javax.swing.JTextField lParam;
    private javax.swing.JScrollPane liniarSP;
    private javax.swing.JButton loadImgButton;
    private javax.swing.JButton loadLabesDB;
    private javax.swing.JButton loadTestDB;
    private javax.swing.JButton loadTrainDB;
    private javax.swing.JLabel meniuLabel;
    private javax.swing.JLabel nrIteratii;
    private javax.swing.JPanel panelLiniarSVM;
    private javax.swing.JPanel panelRbfSVM;
    private javax.swing.JPanel panelSVM;
    private javax.swing.JPanel panelSteps;
    private javax.swing.JTextField param;
    private javax.swing.JScrollPane rbfSP;
    private javax.swing.JLabel resultLiniar;
    private javax.swing.JLabel resultRBF;
    private javax.swing.JLabel rezultatLabel;
    private javax.swing.JButton runLiniar;
    private javax.swing.JButton runLiniarAuto;
    private javax.swing.JButton runRBF;
    private javax.swing.JButton runRBFAuto;
    private javax.swing.JButton step1Run;
    private javax.swing.JButton step2Run;
    private javax.swing.JButton step3Run;
    private javax.swing.JButton step4Run;
    private javax.swing.JTabbedPane tabbedPaneGUI;
    private javax.swing.JTabbedPane tabbedPaneParams;
    private javax.swing.JLabel threshStep1;
    // End of variables declaration//GEN-END:variables

    @Override
    public <T> void println(T t) {
        consola.append(t.toString() + "\n");
    }

    @Override
    public <T> void println(List<T> list) {
        consola.append("Urmeaza elemente lista:\n");
        for (T t : list) {
            consola.append(t.toString() + "\n");
        }
    }

    @Override
    public void println(double[][] d) {
        consola.append("\n\nUrmeaza elemente din matrice :\n");
        for (int row = 0; row < d.length; row++) {
            for (int col = 0; col < d[0].length; col++) {
                consola.append(d[row][col] + "  ");
            }
            consola.append("\n");
        }
    }

    private void saveTrainTestFile(Step4.Result step4Result, double ratio, File fTrain, File fTest) {
        int nrRowFromF = step4Result.F.length;
        int nrColFromF = step4Result.F[0].length;
        int N1 = (int) Math.round(ratio * nrRowFromF); //nr coloane
        double[][] labels_samples_Train = new double[N1][nrColFromF + 1];
        for (int i = 0; i < N1; i++) {
            labels_samples_Train[i][0] = step4Result.etichete[i].doubleValue();
            for (int j = 0; j < nrColFromF; j++) {
                labels_samples_Train[i][j + 1] = step4Result.F[i][j];
            }
        }
        FileUtils.writeFullInFile(fTrain.getAbsolutePath(), labels_samples_Train);

        double[][] labels_samples_Test = new double[nrRowFromF - N1][nrColFromF + 1];
        for (int i = N1; i < nrRowFromF; i++) {
            labels_samples_Test[i-N1][0] = step4Result.etichete[i].doubleValue();
            for (int j = 0; j < nrColFromF; j++) {
                labels_samples_Test[i-N1][j + 1] = step4Result.F[i][j];
            }
        }
        FileUtils.writeFullInFile(fTest.getAbsolutePath(), labels_samples_Test);
    }

}
